<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>喵托邦</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://seucr.github.io/"/>
  <updated>2019-09-29T07:46:55.778Z</updated>
  <id>https://seucr.github.io/</id>
  
  <author>
    <name>Patrick Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>读书笔记 | 罗马人的故事X·条条大路通罗马</title>
    <link href="https://seucr.github.io/2019/09/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%BD%97%E9%A9%AC%E4%BA%BA%E7%9A%84%E6%95%85%E4%BA%8BX%C2%B7%E6%9D%A1%E6%9D%A1%E5%A4%A7%E8%B7%AF%E9%80%9A%E7%BD%97%E9%A9%AC/"/>
    <id>https://seucr.github.io/2019/09/29/读书笔记-罗马人的故事X·条条大路通罗马/</id>
    <published>2019-09-29T07:46:17.000Z</published>
    <updated>2019-09-29T07:46:55.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="梗概"><a href="#梗概" class="headerlink" title="梗概"></a>梗概</h1><p>本册的时间线停留在安敦尼·庇护和马克·奥勒留之间，往前罗马帝国是亚欧非的主人，创造了辉煌的文明；再往后罗马帝国由盛而衰，步入诸神的黄昏。在这个时间点停下历史的脚步，忘记那些军事和政治的杀伐，讲一讲罗马人创造的宏伟道路，看一看罗马人的精神内在；可以说安排得十分恰当，毕竟再往后，就再也没有罗马人了。</p><p>本册着重讲述了罗马人的基础设施建设，从硬件建设和软件建设两个方面，介绍了罗马人在道路、上下水道、医疗、教育方面的辉煌成就，并由此突出了罗马人开放、高效、认真、灵活的民族性格。鉴于前册中也穿插介绍了各个时期的“地标式”建筑，例如图拉真记功柱等，以及同样是所谓“软件基础设施”的国家安全等内容，本册对这部分就一笔带过。</p><p>本册尽管很薄，但却是全套里引用图画最多的一册，甚至开篇有很多照片彩页，展现从罗马本土到欧洲、非洲、亚洲各地罗马时期的建筑遗迹。这些遗迹即便是放在21世纪的今天，其规模也是十分震撼的，看完照片，真的很想去实地亲手摸一摸这些伟大的历史。</p><h1 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h1><h2 id="罗马人-vs-中国人"><a href="#罗马人-vs-中国人" class="headerlink" title="罗马人 vs 中国人"></a>罗马人 vs 中国人</h2><p>本册开篇，作者就抛出了一个有意思的问题。在几乎相同的时间点（公元前三世纪），罗马人开始修筑后来遍布欧洲的道路网络，而东方的秦始皇开始修建的却是阻隔来往的后来号称万里的长城。</p><blockquote><p>修建长城的中国人和修筑了四通八达的道路网的罗马人的不同就在于，对于国家应该兴建什么样的大工程这件事认识不同。壁垒是断绝人的往来，而道路则是促进人的来往。那么，国家方位这一最重要的目的，是通过断绝与其他民族的来往来实现，还是通过促进本国内人民的来往来实现呢？</p><p>两个民族在这一方面观念的不同，对于中国和罗马这两大古代强国来说，甚至决定了以后的国家形态。</p></blockquote><p>从结论看来，这个问题就十分有趣。即便是在两千多年后的今天，中国和西方的选择（尽管西方世界变成了盎格鲁-萨克逊人主导），与当时并没有什么不同：西方人创造了互联网，而我们修建了强大的Great FireWall。</p><p>尽管作者抛出了合理的结论，但却没有给出问题合理的解释，即为什么会早在公元前三世纪，东西方就已经走向了两条不同的道路。作者似乎只是简单归结为民族性格不同，而要回答这个问题，可能就要写篇论文了。我也只能列出几个我想到的点。</p><ul><li><p>民族性格不同</p><p>罗马人在保留自己民族性格的同时，很早就大量继承了海洋民族希腊的思想（所以一般被称作希腊罗马时期）。</p><p>在海上防御是无法建造墙壁的，只能通过灵活机动的战术、数量优势、技术优势等方法取胜；希腊人喜欢移居海外，在地中海各处都有希腊城市，如何有更方便的交通方式应该是他们一直思考的问题。继承希腊人精神的罗马人，在面对北方蛮族的时候，应该首先想到的也是如何用更加灵活机动的战术击败对手，如何将军队、后勤物资更方便地送抵各处边境。为此，罗马人选择大规模建设标准化道路，将道路复线化、网络化，让军队、后勤有更多的选择。最终达到国道约8万公里、加上私营道路总共30万公里的规模。此外，道路也是罗马“文化输出”的一个形式，通过道路连接，将战败者的土地和罗马联系在一起，缓慢同化战败者，形成命运的共同体。这样，在面对新的敌人时，原本的战败者就会和罗马人站在一起（当然，罗马人对异族开放的态度也是关键）。</p><p>而秦朝起源于关中平原，地形狭长而居于秦岭和北山之间，所谓“雍州之地，崤函之固”。习惯于被群山拥抱的山地民族，似乎都更缺乏安全感，倾向于保守性格（即便是同为希腊人的斯巴达）。面对北部戎、狄等蛮族侵扰，秦朝选择在北面修筑长城，将自己圈起来免于蛮族袭击；即便秦灭六国坐拥九州，也无法摆脱“原生家庭”的影响，将秦长城扩建，一路向东，横跨整个北方。此后又历经汉、唐、宋、明多次修建、扩建，方为万里长城。</p><p>关于中国人各朝各代是否有系统的修建国内道路网的记录，未做探究。</p></li><li><p>生存环境不同</p><p>同一时期罗马人和中国人面对的对手不同，生存难易程度不同，罗马人面对的外部环境比中国人要好一些。</p><p>自从共和时期罗马人从罗马城市开始扩张，依靠罗马军团，击败伊特鲁里亚人、迦太基人、高卢人、日耳曼人等等，除了汉尼拔时期的第二次布匿战争有灭国风险外，其他时期并没有长时间地与对手进行拉锯或处于下风。这一点我认为从罗马军队数量可以得到验证，即便是第二次布匿战争时期，似乎最多时候也就只有十余个罗马军团，加上辅助兵也才十几万人；而在帝政时期，需要守卫长达两三千公里的莱茵-多瑙-两河防线，竟然也只有26个军团，而同时期的罗马城人口超过百万。这就是说，罗马人只需要用极少数的精锐兵力，配合行省辅助兵，就可以完成国防任务。</p><p>而同一时期的中国人（秦国人），尽管坐拥崤函之固，生存环境似乎更差。不仅需要提防东方六国的合纵，还要关注西北蛮族的动向，尽管没有研究过秦朝军力，但从商鞅变法所谓“军功制”就可以看出，秦朝需要将整个国家军事化，才能赢得生存之战。其后的汉朝面对北方的匈奴，更是有白登之围，后经文景两朝修生养息，汉武帝才将匈奴赶出漠南。</p><p>由此可见，中国面临的安全形势比罗马人要严峻得多，需要依赖一些额外的手段，才能防御自己。</p><p>另一个证明就是，哈德良在面对英伦北部蛮族的时候，也修建了哈德良长城；而后期罗马面对蛮族频繁的入侵，马可·奥勒留又重新修筑了罗马城墙。</p><p>所以，如果单纯将修墙归结于民族缺乏安全感的敏感性格，似乎有失偏颇。缺乏安全感并不完全源自自身，外部生存环境影响也很重要。</p></li></ul><h2 id="罗马人-vs-基督徒"><a href="#罗马人-vs-基督徒" class="headerlink" title="罗马人 vs 基督徒"></a>罗马人 vs 基督徒</h2><p>本册中，作者似乎一直在暗示一个观点，即罗马人是开放的而基督徒是保守的。我认为，和前面罗马人vs中国人一样，这只是不同时期的人在面对不同时期的环境时做出的选择不同，如若不是，为何基督教后来又在罗马皇帝戴克里先的主导下成为了罗马的国教呢？正统的罗马人为何没有延续下来呢？</p><p>除去评判是非外，有一些观点还是值得思考的。</p><h3 id="医疗和生死观"><a href="#医疗和生死观" class="headerlink" title="医疗和生死观"></a>医疗和生死观</h3><p>罗马人的生死观是豁达的：</p><blockquote><p>既然寿命已经，就该顺从天命。对于年轻、健壮的人负伤或者生病，要竭力治疗，而如果并没有遭遇不幸而寿命已尽，则从容升天乃是自然的生活态度。</p></blockquote><p>罗马人是火化的，骨灰埋葬的地方并不与世隔绝，甚至埋葬在国道旁边，配以有趣的墓志铭。</p><blockquote><p>风尘仆仆的旅行者可以坐在树荫下的墓地阶梯上，一边看着死者寄予生者的信息，一边休憩。在埋葬骨灰、还没有地狱概念的那个时代，生者和死者可以这样相邻共生。</p></blockquote><p>自从凯撒时期开始，罗马人就十分重视医生行业，给予来罗马行医的人以罗马公民权。同时大量建设浴场，每天下午的重要活动之一就是洗澡，可以想象，罗马人一定比中世纪乃至近代的欧洲人都要干净。在首都罗马，医疗甚至是公费的。</p><p>相比而言，基督教的生死观似乎更加保守。有了天堂和地狱之分，人间也就分了三六九等；死后不火化，坟墓只能建在远离城市的地方；尽管教堂的医疗也是免费，但作者认为这是为了和罗马医院和神庙抢生意。</p><h3 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h3><p>同样自凯撒时期，罗马给予在罗马的教师以罗马公民权，教师地位得到了进一步的提升。与道路建设不同，教育行业是私营而非国有（私塾开在了叫做“艾萨多拉“（街角）的地方）。这样，教师薪资可以随市场决定，教授内容也因人而异，允许不同的思想传播，</p><p>而当基督教成为国教，特别是后来宣布其他宗教为异端，人类的思想反而被禁锢，迎来了被成为黑暗时代的中世纪。人类在黑暗之中逡巡不前，科学的发现、新兴的思想，往往带来的是残酷的刑罚。</p><blockquote><p>那些认为社会应该用一种思想来统一的人掌握权力的时候，想要实行的便是按照自己的思想重新组织教育和福利。基督教成为罗马帝国的国教以后，基督教会所做的就是这件事。半个世纪以后，罗马帝国灭亡了。留下来的是可以成为基督教帝国的拜占庭帝国。位于罗马帝国东方的雅典学院和亚历山大的博学园，不久也停办了。这是因为，怀疑是研究的根本。</p></blockquote><p>中世纪，大量希腊罗马时期的珍贵文献被焚毁，建筑被破坏，但讽刺的是，基督教时期的道路甚至罗马教廷的用水，还是依赖罗马时期所建。</p><blockquote><p>罗马教廷尽管觉得水不可或缺，却不愿意以罗马皇帝的名字给水道命名。因此，图拉真水道取圣保罗的名字改名为”保罗水道“。这条水道至今仍在台伯河西岸一带供水。</p></blockquote><h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><h2 id="共和精神"><a href="#共和精神" class="headerlink" title="共和精神"></a>共和精神</h2><p>在刚刚步入帝制的这最初的一百年里，其实仍有着浓重的“共和”气息，皇帝们还没有东方专制君主的味道。而正是这种共和的精神，构建了罗马的大厦，让罗马人能清醒地区分公与私，第一阶层能热情地投身公共事业、避免社会阶层收入差距过大，最终使得社会稳步前进。</p><p>在修建道路、水路上，罗马人丝毫没有想收回成本，既没有过桥过路费，水费也只有专门铺设通往私宅的水路时才象征性收取，罗马人只是将这些看做统治者必须要做的事情而已。这也是最朴素的共和（publica）理念吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;梗概&quot;&gt;&lt;a href=&quot;#梗概&quot; class=&quot;headerlink&quot; title=&quot;梗概&quot;&gt;&lt;/a&gt;梗概&lt;/h1&gt;&lt;p&gt;本册的时间线停留在安敦尼·庇护和马克·奥勒留之间，往前罗马帝国是亚欧非的主人，创造了辉煌的文明；再往后罗马帝国由盛而衰，步入诸神的黄昏。在这
      
    
    </summary>
    
    
    
      <category term="读书笔记" scheme="https://seucr.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="历史" scheme="https://seucr.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>写在前面——关于博客</title>
    <link href="https://seucr.github.io/2019/09/29/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/"/>
    <id>https://seucr.github.io/2019/09/29/写在前面——关于博客/</id>
    <published>2019-09-29T05:15:45.000Z</published>
    <updated>2019-10-09T11:14:49.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于博客"><a href="#关于博客" class="headerlink" title="关于博客"></a>关于博客</h1><p>看过一个HEXO Theme 3-hexo的<a href="https://yelog.org/" target="_blank" rel="noopener">作者主页</a>的话，也正是这段话，让我下决心创建自己的博客。</p><blockquote><p>我们每个人的在网络上产生的数据越来越多，这些信息是我们在互联网上存在过的痕迹，值得我们认真对待。但是它们被分散分布在各个网站上。很多时候我们很难将它们聚合在一起，而且各个网站的信息排布方式也没有办法自由控制，所以我们需要一个可以由自己主宰的空间——博客。</p><p>通过博客，我们可以记录自己的生活和成长的轨迹。它不像 Twitter 那样碎片化，也不像 Facebook 那样关系化，它是私人的空间。</p></blockquote><p>据说，自人类诞生以来，这颗星球上累计存在过1000亿个人类个体。这中间能留名青史的可谓沧海一粟；绝大部分的人犹如流星，只在那一瞬留下过痕迹，再往后，他的所言所想都灰飞烟灭。</p><p>凭借现代的互联网技术，人类在发言权上第一次实现了平等。任何人都可以在网路上留下任何话语（不考虑监管），只要互联网（公司）还在，这些话语就可以永远保留下去，也就给了任何人留下存在过的痕迹的可能。</p><p>在这里，我会写下我看到的，我想到的，和我自己。</p><p>待我离去，这里就是我的人生的注脚。</p><h1 id="关于HEXO"><a href="#关于HEXO" class="headerlink" title="关于HEXO"></a>关于HEXO</h1><p>互联网带来便利，不幸的是，它已经畸形。</p><p>WWW之父Tim Berners-Lee说，原本WWW是想让每个人都有创建自己空间的能力，尽管让别人找到会花费一番功夫，但每个人都是独立的；而现在WWW的发展，却出现了极强的中心化。中心化，并不是技术的错，而是人类的选择。每个人都选择让渡自己的权利，以获得互联网的便利，最终这造就了国外google、facebook，国内BAT、美团等等的互联网巨头；甚至让它们有了大数据的机会，记录每一次手机的点击，每一次GPS的位置，每一条说出的语音…最后，人类自己关进了自己建造的囚笼。</p><p>我不想承担大多数人选择的结果。</p><p>HEXO给了我建站的自由，我几乎可以决定我站点里的一切，而且无需有任何被监视、被控制的风险。</p><p>然而，悲哀的是，站点不得不托管在github上。github正如其名hub，必须是中心化的，试想，如果github崩溃/被墙，如果github也开始大数据分析各个repo…。不幸中的幸运是，github尚为较纯粹的技术空间，目前还没有这个迹象。</p><h1 id="关于喵托邦"><a href="#关于喵托邦" class="headerlink" title="关于喵托邦"></a>关于喵托邦</h1><p>每个人都有自己的思想，否则就不能称之为人，也是他区别于他人的标志。</p><p>每个人都有表达自己思想的自由，否则这就是个黑暗的世界。</p><p>身在一个从技术和思想上都比以往更加注重监管的世界，无论是在哪个国家在哪个平台，都无法自己的呼吸，只有枷锁轻重之分。</p><p>或许，心存乌托邦的幻想，才有活下去的勇气。</p><h1 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h1><p>本站通过<a href="https://hexo.io" target="_blank" rel="noopener">HEXO</a>构建，目前使用的是<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT主题</a>。</p><p>从零基础开始构建，大约需要2天。Windows 7 SP1平台构建，可以参考《<a href="/2019/09/27/HEXO之路/" title="HEXO之路">HEXO之路</a>》这篇文章；如果有问题，也可以<a href="mailto:seutxcr@gmail.com" target="_blank" rel="noopener">mail我</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于博客&quot;&gt;&lt;a href=&quot;#关于博客&quot; class=&quot;headerlink&quot; title=&quot;关于博客&quot;&gt;&lt;/a&gt;关于博客&lt;/h1&gt;&lt;p&gt;看过一个HEXO Theme 3-hexo的&lt;a href=&quot;https://yelog.org/&quot; target=&quot;_bl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HEXO之路</title>
    <link href="https://seucr.github.io/2019/09/27/HEXO%E4%B9%8B%E8%B7%AF/"/>
    <id>https://seucr.github.io/2019/09/27/HEXO之路/</id>
    <published>2019-09-27T06:32:39.000Z</published>
    <updated>2019-09-29T10:44:03.198Z</updated>
    
    <content type="html"><![CDATA[<p>最近查找资料时，看到很多漂亮的博客，拉到最下面都有一行小字：</p><blockquote><p><letf>powered by HEXO</letf></p></blockquote><p>恰好有闲暇不务正业，于是就有了这个站点的诞生。本文记录了站点的搭建过程，算是它出生过程的全记录吧。</p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>HEXO是一个部署在npm上的package，提供了基于Markdown进行blog站点开发的框架。</p><p>没有搞过前端开发的人（e.g：我）看了这句话简直是黑人问号脸。慢慢来说：</p><ul><li><strong>网站开发</strong></li></ul><p>目前的网页一般都是HTML/JS/CSS的文件集合，浏览器依据这些文件渲染出可见的网页。</p><p>不过随着网页美观要求越来越高、人又越来越懒，直接写HTML/CSS做网页更费劲了，特别是各种tag的语法很不友好。例如，写一个简单的HTML标题需要这样写，tag还得匹配出现。</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    This is a header</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>于是就有了Markdown的诞生。它对一个标题的写法简单多了：</p><blockquote><p># This is a header</p></blockquote><ul><li><strong>Markdown语言</strong></li></ul><p>如果把HTML叫做机器语言，那么Markdown语言就是介于人类语言和机器语言之间的存在。它不会取代HTML，只是为了让人们摆脱HTML语法的地域，更加方便高效地编写网页。</p><p>它的语法比HTML简单的多，而且兼容HTML的tag，还可以与HTML做语法转换。这个blog就是用Markdown语言写的。</p><ul><li><strong>nodejs &amp; npm</strong></li></ul><p>原文引用nodejs官网的描述：</p><blockquote><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p></blockquote><p>nodejs是一个JavaScript运行环境，而npm则是与nodejs一起运行的package manager。利用nodejs+npm，可以在本地运行第三方package，例如HEXO。</p><ul><li><strong>HEXO</strong></li></ul><p>HEXO是托管在npm网站的一个package，它提供了一个博客框架，可以利用Markdown语言编写博客并搭建站点；支持将博客站点部署在github上，从而能让所有人看到。</p><p>HEXO层次划分很清晰。支持各种插件，支持自定义主题，在其官网可以下到大量官方插件和主题。因为代码是全开源，所以任何人也都可以自行定制插件、主题。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>安装环境是<strong>Windows 7 SP1</strong> 。</p><h2 id="nodejs-amp-npm"><a href="#nodejs-amp-npm" class="headerlink" title="nodejs &amp; npm"></a>nodejs &amp; npm</h2><ol><li><p>下载<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs安装包</a>，并安装。现在nodejs里默认集成了npm，无需另行安装。</p></li><li><p><strong>重新打开</strong>cmd.exe，执行以下命令，成功的话就是nodejs和npm安装成功了：</p><blockquote><p>C:\User&gt; node -v</p><p>v10.16.3</p><p>C:\User&gt; npm -v</p><p>v6.9.0</p></blockquote></li><li><p>去<a href="https://www.npmjs.com" target="_blank" rel="noopener">npm官网</a>注册一个账号，需要记住用户名、密码、邮箱三者。</p></li><li><p>在cmd.exe里输入下面的命令，输入用户名、密码、邮箱登录npm：</p><blockquote><p>npm login</p></blockquote><p>通过下面的命令，如果看到自己的用户名，就是登录成功了：</p><blockquote><p>npm whoami</p></blockquote></li></ol><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>因为HEXO项目用git管理，所以需要安装git环境。</p><p>在<a href="https://gitforwindows.org/" target="_blank" rel="noopener">git官网</a>下载安装包，安装一下就好了。</p><h2 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">HEXO官网</a>有很详细的指南，参照执行，似乎英文版更好理解一些，如果有困难，可以看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">中文版</a>。这里只是引用原文，在cmd.exe里面依次执行：</p><blockquote><ul><li>npm install hexo-cli -g</li><li>hexo init blog</li><li>cd blog</li><li>npm install</li><li>hexo server</li></ul></blockquote><p>如果执行hexo server后有如下回显，其实就已经可以通过<a href="http://localhost:4000的URL，本地访问HEXO博客站点了。" target="_blank" rel="noopener">http://localhost:4000的URL，本地访问HEXO博客站点了。</a></p><blockquote><p>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop.</p></blockquote><h1 id="本地HEXO站点"><a href="#本地HEXO站点" class="headerlink" title="本地HEXO站点"></a>本地HEXO站点</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>HEXO的基本操作都可以参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener">官网Doc</a>，建议看一遍各个页面的视频教程（油管视频，需代理），学起来就快多了。</p><p>例如，新建博客：</p><blockquote><p>hexo new post “$TITLE”</p></blockquote><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>HEXO默认使用的主题叫landscape，还算简约大方。</p><p>可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网主题</a>里下载更多的主题，也可以自己做一个，如果够牛。</p><img src="/2019/09/27/HEXO之路/landscape_foresee.png"><h2 id="更多功能"><a href="#更多功能" class="headerlink" title="更多功能"></a>更多功能</h2><p>前端的开发都站在基于他人的肩上来做的，而不要重复制作轮子。</p><p>官网插件里有很多插件可供选择，有不少有用的（比如允许用户评论、统计站点流量等），也有不少好玩的（比如爬douban的书影音、IMdB资料等）。</p><p>装上插件、配上心仪的主题之后，即便是本地站点，也变得很好玩。在后面我会把本站用到的插件罗列一二。</p><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><p>如果想让博客被更多人看到，就需要部署HEXO站点。</p><p>HEXO支持将站点托管的github上，这样所有人都可以通过github提供的域名访问到站点。如果土豪可以自己注册一个域名，那就有了一个十分个性化博客站了。</p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>github都是SSH加密通讯的，需要先装一个SSH环境，可以到<a href="https://www.mls-software.com/opensshd.html" target="_blank" rel="noopener">这个地址</a>下载安装。</p><p>安装后，<strong>重启</strong>cmd.exe，就可以用ssh命令了。</p><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p>还需要准备一个github仓库，这部分官网Doc写的比较绕，简而言之就是下面这几步。</p><ol><li><p>在github上创建一个repository，点右上角的“+”号就能看到“New Repository”。</p><p>注意，这个repository的name<strong>一定</strong>要是github的username，类型<strong>一定</strong>要是Public。</p></li><li><p>这样过一段时间之后，就可以在”My Repository”里看到自己的仓库，并访问仓库的域名了（$username.github.io）</p></li><li><p>上传本地SSH public key到github</p><p>在cmd.exe上执行:</p><blockquote><p>mkdir .ssh</p><p>cd .ssh</p><p>ssh-key gen -C $(github_mail_address)</p></blockquote><p>将.ssh/id_rsa.pub的内容贴到github的如下位置：右上角头像 - “ Setting “ - “ SSH and GPR keys”：</p><img src="/2019/09/27/HEXO之路/github_sshkey.png"></li><li><p>这时候，在cmd.exe上执行下面的命令，如果正确回显，那就OK了。</p><blockquote><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>Hi XXXX! You’ve successfully authenticated, but GitHub does not provide shell a<br>ccess.</p></blockquote></li></ol><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这时候离部署github就差一步了：修改hexo工程的_config.yml。</p><p>有两个地方需要修改：</p><ol><li><p>URL：</p><p>将url改成github repo的URL，如果有子目录，填写在root栏位。</p><img src="/2019/09/27/HEXO之路/config_yml_url.png"></li><li><p>Deploy：</p><p>按如下格式填写，repo填写github repo的URL。</p><img src="/2019/09/27/HEXO之路/config_yml_deploy.png"></li></ol><p>修改后，在cmd.exe上执行下面三个命令，就可以完成部署：</p><blockquote><p>npm install hexo-deployer-git –save</p><p>hexo g</p><p>hexo d</p></blockquote><p>到这里，通过github repo的域名<a href="https://seucr.github.io/">https://seucr.github.io</a>访问站点了。</p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p>个人最近觉得这两个工具开发比较顺溜。</p><ol><li><p>sublime text</p><p>可以打开整个目录，如果是python等解释型语言，自带解释器。</p><img src="/2019/09/27/HEXO之路/sublime.png"></li><li><p>Typora</p><p>连Marddown语言都不需要学了，直接用类似于Office Word的方式编辑，所见即所得。</p><img src="/2019/09/27/HEXO之路/typora.png"></li></ol><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="Algolia"><a href="#Algolia" class="headerlink" title="Algolia"></a>Algolia</h2><p>Algolia提供站内搜索服务，优点是免费，而且不需要绑定大陆信息；缺点是，NexT目前默认只能支持Algolia搜索Post标题和Page，内容无法搜索。</p><p>新版本的NexT主题已经集成了Algolia的支持，不过仍有一些小动作需要完成。大致的过程可以参考<a href="http://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">这里</a>，不过这个说明似乎比较旧，所以update如下：</p><ol><li><p>注册<a href="https://www.algolia.com" target="_blank" rel="noopener">Algolia</a>，创建Index。Index Name可以自由选择。</p></li><li><p>本地安装Algolia</p><blockquote><p>npm install –save hexo-algolia</p></blockquote></li><li><p>添加Key权限。在”API Keys” - “All API Keys” 里，编辑Usage API Key，添加Operation权限“AddObject”、”DeleteObject”、”listIndexes”、”deleteIndex”。</p></li><li><p>（下面开始就和教程不同了）在Windows cmd.exe下进入站点目录，执行：</p><blockquote><p>set HEXO_ALGOLIA_INDEXING_KEY=<strong>$(ADMIN API Key)</strong></p><p>hexo algolia</p></blockquote><p>如果成功，这时进入Algoria控制台 - “Indices” - “Browse”里，应该可以看到所有Post/Page信息，注意，是没有Post的正文信息的，所以无法搜索Post正文。</p></li><li><p>修改NexT<strong>站点配置文件</strong>，添加如下内容，其中信息都在Algoria控制台 - “API Keys”里能够找到：</p><blockquote><p>algolia:<br>  applicationID: ‘$(applicationID)’<br>  apiKey: ‘$(Search-Only_API_Key)’<br>  adminApiKey: ‘$(Admin_API_Key)’<br>  indexName: ‘$(Index_name)’<br>  chunkSize: 5000</p></blockquote></li><li><p>修改<strong>NexT主题</strong>配置文件，修改如下两处</p><blockquote><p>algolia_search:<br>  enable: <strong>true</strong></p><p>local_search:<br>  enable: <strong>true</strong></p></blockquote></li><li><p>此时重启站点，就可以看到侧边栏里的“搜索”字样了，点开后会弹出搜索框。</p></li></ol><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io</a></li><li><a href="https://www.cnblogs.com/trista222/p/8017300.html" target="_blank" rel="noopener">https://www.cnblogs.com/trista222/p/8017300.html</a></li><li><a href="https://www.jianshu.com/p/fa2354d61e37" target="_blank" rel="noopener">https://www.jianshu.com/p/fa2354d61e37</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近查找资料时，看到很多漂亮的博客，拉到最下面都有一行小字：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;letf&gt;powered by HEXO&lt;/letf&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;恰好有闲暇不务正业，于是就有了这个站点的诞生。本文记录了站点的搭建过程，
      
    
    </summary>
    
    
    
      <category term="技术" scheme="https://seucr.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://seucr.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
